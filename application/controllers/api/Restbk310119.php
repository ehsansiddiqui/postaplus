<?phpdefined('BASEPATH') OR exit('No direct script access allowed');// This can be removed if you use __autoload() in config.php OR use Modular Extension/** @noinspection PhpIncludeInspection */require APPPATH . 'libraries/REST_Controller.php';/** * This is an example of a few basic user interaction methods you could use * all done with a hardcoded array * @package         CodeIgniter * @subpackage      Rest Server * @category        Controller * @author          Shijin * @license         MIT */class Rest extends REST_Controller{	function __construct()	{		// Construct the parent class		parent::__construct();		// Configure limits on our controller methods		// Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php		// $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key		// $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key		// $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key		$this->load->helper(array(			'form',			'url'		));		$this->load->model('rest_m', 'Obj_Rest_M', TRUE);		$this->load->database();		date_default_timezone_set('Asia/Kuwait');        }	private	function sendPushNotification($registration_ids = '', $message = '', $device_type = '', $notification_type = '')		{		$fields = array();		$url = 'https://fcm.googleapis.com/fcm/send';		if ($device_type == 'android')			{			if (!defined('GOOGLE_API_KEYs')) define('GOOGLE_API_KEYs', 'AIzaSyDcugxHQ7on_IMy0Q63YcBFrECmIXL7Wpg');			$fields = array(				'to' => $registration_ids,				'priority' => 'high',				'notification' => array(					'notification_type' => $notification_type,					'title' => 'business bandhu',					'body' => $message				)			);			}		if ($device_type == 'ios')			{			if (!defined('GOOGLE_API_KEYs')) define('GOOGLE_API_KEYs', 'AIzaSyDcugxHQ7on_IMy0Q63YcBFrECmIXL7Wpg');			$fields = array(				'to' => $registration_ids,				'content_available' => true,				'priority' => 'high',				'notification' => array(					'body' => $message,					'title' => 'business bandhu'				) ,				'data' => array(					'notification_type' => $notification_type				)			);			}		$headers = array(			'Authorization: key=' . GOOGLE_API_KEYs,			'Content-Type: application/json'		);		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $url);		curl_setopt($ch, CURLOPT_POST, true);		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));		$result = curl_exec($ch);		if ($result === FALSE)			{			die('Curl failed: ' . curl_error($ch));			}		curl_close($ch);		// print_r($result);die;		return $result;		}	private	function escapeString($val)		{		$db = get_instance()->db->conn_id;		$val = mysqli_real_escape_string($db, $val);		return $val;		}	private	function uploads($userfile)		{		$this->load->helper(array(			'image_helper'		));		$config = array(			'upload_path' => './user/',			'allowed_types' => "gif|jpg|png|jpeg|pdf",			'overwrite' => TRUE,			'encrypt_name' => TRUE		);		$this->load->library('upload', $config);		if ($this->upload->do_upload($userfile))			{			$upload_data = $this->upload->data();			return $upload_data;			}		  else			{			$error = array(				'error' => $this->upload->display_errors()			);			$this->session->set_flashdata('message1', 'invalid image');			redirect('driver');			}		}	public	function uploads_post($userfile)		{		$this->load->helper(array(			'image_helper'		));		$config = array(			'upload_path' => './user_post/',			'allowed_types' => "gif|jpg|png|jpeg|pdf",			'overwrite' => TRUE,			'encrypt_name' => TRUE		);		$this->load->library('upload', $config);		if ($this->upload->do_upload($userfile))			{			$upload_data = $this->upload->data();			return $upload_data;			}		  else			{			$error = array(				'error' => $this->upload->display_errors()			);			$this->session->set_flashdata('message1', 'invalid image');			redirect('driver');			}		}	public	function SignIn_post()		{		if (isset($_REQUEST['phone_number']) && !empty($_REQUEST['phone_number']) && isset($_REQUEST['password']) && !empty($_REQUEST['password']) && isset($_REQUEST['fcm_token']) && !empty($_REQUEST['fcm_token']) && isset($_REQUEST['device_type']) && !empty($_REQUEST['device_type']))			{                    			$phone_number = $_REQUEST['phone_number'];			$password = $_REQUEST['password'];			$device_id = $_REQUEST['fcm_token'];			$device_type = $_REQUEST['device_type'];			$result = $this->Obj_Rest_M->check_user($phone_number, $password);			if (!empty($result))				{				$message = ['status' => TRUE, 'user_id' => $result->user_id, 'phone_number' => $result->phone_number, 'full_name' => $result->full_name, 'profile_image' => $result->image];				$this->Obj_Rest_M->user_updated($device_id, $device_type, $result->user_id);				$this->set_response($message, REST_Controller::HTTP_OK);				}			  else				{				$message = ['status' => FALSE, 'message' => 'Sorry, could not match that mobile number & password.'];				$this->set_response($message, REST_Controller::HTTP_NOT_FOUND);				}			}		  else			{			$message = ['status' => FALSE, 'message' => 'Invalid Parameters'];			$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST);			}		}	public	function SignUp_post()		{		if (isset($_REQUEST['phone_number']) && !empty($_REQUEST['phone_number']) && isset($_REQUEST['password']) && !empty($_REQUEST['password']) && isset($_REQUEST['full_name']) && !empty($_REQUEST['full_name']) && isset($_REQUEST['fcm_token']) && isset($_REQUEST['device_type']))			                    {			$phone_number = $this->escapeString($this->input->post('phone_number'));			$password = $this->escapeString($this->input->post('password'));			$full_name = $this->escapeString($this->input->post('full_name'));			$device_id = $this->input->post('fcm_token');			$device_type = $this->input->post('device_type');			$created_date = date('Y-m-d H:i:s', time());			$res = $this->Obj_Rest_M->users_check($phone_number);			if (!empty($res))				{				$message = ['status' => FALSE, 'message' => 'Already exists'];				$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST);				}			  else				{				$data = array(					'phone_number' => $phone_number,					'password' => $password,					'full_name' => $full_name,                                   					'device_id' => $device_id,					'device_type' => $device_type,					'created_date' => $created_date,					'modified_date' => $created_date				);				$user_id = $this->Obj_Rest_M->add_user($data);				if (!empty($_FILES['userfile']['name']))					{					$userfile = 'userfile';					$upload_data = $this->uploads($userfile);					$file_name = $upload_data['file_name'];					$data1 = array(						'image' => $file_name					);					$this->db->where('user_id', $user_id);					$this->db->update('user', $data1);					}				if (!empty($user_id))					{					$message = ['status' => TRUE, 'user_id' => $user_id];					$this->set_response($message, REST_Controller::HTTP_CREATED);					}				}			}		  else			{			$message = ['status' => FALSE, 'message' => 'Invalid Parameters'];			$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST);			}		}                                                                                                        public	function profile_get()		{		$user_id = $this->get('user_id');		if (isset($user_id) && !empty($user_id))			{			$result = $this->Obj_Rest_M->get_profiles($user_id);			if ($result)				{				// Set the response and exit				$this->response(['status' => TRUE, 'data' => $result], REST_Controller::HTTP_OK);				}			  else				{				// Set the response and exit				$this->response(['status' => FALSE, 'message' => 'No records found'], REST_Controller::HTTP_NOT_FOUND);				}			}		  else			{			$message = ['status' => FALSE, 'message' => 'Invalid Parameters'];			$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST);			}		}                   	public	function EditProfile_post()		{		if (isset($_REQUEST['user_id']) && !empty($_REQUEST['user_id']) && isset($_REQUEST['phone_number']) && !empty($_REQUEST['phone_number']) && isset($_REQUEST['full_name']) && !empty($_REQUEST['full_name'])&& isset($_REQUEST['email_id']))			{			$user_id = $this->escapeString($this->input->post('user_id'));			$phone_number = $this->escapeString($this->input->post('phone_number'));			$full_name = $this->escapeString($this->input->post('full_name'));			$email_id = $this->escapeString($this->input->post('email_id'));			$created_date = date('Y-m-d H:i:s', time());			$data = array(				'full_name' => $full_name,				'email_id' => $email_id,				'modified_date' => $created_date			);                                               // print_r($data);die;			$user_id = $this->Obj_Rest_M->edit_user($data, $user_id);			$file_name = NULL;			if (!empty($_FILES['userfile']['name']))				{				$userfile = 'userfile';				$upload_data = $this->uploads($userfile);				$file_name = $upload_data['file_name'];				$data1 = array(					'image' => $file_name				);				$this->db->where('user_id', $user_id);				$this->db->update('user', $data1);				}			if (!empty($user_id))				{				$message = ['status' => TRUE, 'user_id' => $user_id];				$this->set_response($message, REST_Controller::HTTP_CREATED);				}			}		  else			{			$message = ['status' => FALSE, 'message' => 'Invalid Parameters'];			$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST);			}		}        public   	function Language_get($id = NULL)		{			$result = $this->Obj_Rest_M->get_language();			// If the id parameter doesn't exist return all the users			if ($id === NULL)				{				if ($result)					{					// Set the response and exit					$this->response(['status' => TRUE, 'data' => $result], REST_Controller::HTTP_OK);					}				  else					{					// Set the response and exit					$this->response(['status' => FALSE, 'message' => 'No records found'], REST_Controller::HTTP_NOT_FOUND);					}				}			$id = (int)$id;			if ($id <= 0)				{				$this->response(NULL, REST_Controller::HTTP_BAD_REQUEST);				}			$response = NULL;			if (!empty($result))				{				foreach($result as $key => $value)					{					if (isset($value->language_id) && $value->language_id == $id)						{						$response = $value;						}					}				}			if (!empty($response))				{				$this->set_response(['status' => TRUE, 'data' => $response], REST_Controller::HTTP_OK);				}			  else				{				$this->set_response(['status' => FALSE, 'message' => 'could not be found'], REST_Controller::HTTP_NOT_FOUND);				}				}	            	public   	function PrintingType_get($id = NULL)		{		$user_id =     $this->get('user_id');                $language_id = $this->get('language_id');		if (isset($user_id))			{			$result = $this->Obj_Rest_M->get_printing_type($language_id);			// If the id parameter doesn't exist return all the users			if ($id === NULL)				{				if ($result)					{					// Set the response and exit					$this->response(['status' => TRUE, 'data' => $result], REST_Controller::HTTP_OK);					}				  else					{					// Set the response and exit					$this->response(['status' => FALSE, 'message' => 'No records found'], REST_Controller::HTTP_NOT_FOUND);					}				}			$id = (int)$id;			if ($id <= 0)				{				$this->response(NULL, REST_Controller::HTTP_BAD_REQUEST);				}			$response = NULL;			if (!empty($result))				{				foreach($result as $key => $value)					{					if (isset($value->print_type_id) && $value->print_type_id == $id)						{						$response = $value;						}					}				}			if (!empty($response))				{				$this->set_response(['status' => TRUE, 'data' => $response], REST_Controller::HTTP_OK);				}			  else				{				$this->set_response(['status' => FALSE, 'message' => 'could not be found'], REST_Controller::HTTP_NOT_FOUND);				}			}		  else			{			$message = ['status' => FALSE, 'message' => 'Invalid Parameters'];			$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST);			}		}                                    }?>